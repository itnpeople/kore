{{- if eq .Values.packing "all-in-one" }}

kind: Deployment
apiVersion: apps/v1
metadata:
  name: dashboard
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: dashboard
    {{- include "labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: dashboard
      {{- include "labels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dashboard
        {{- include "labels" . | nindent 8 }}
    spec:
      containers:
        - name: frontend
          image: {{ include "frontend.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.frontend.resources }}
          resources: {{- toYaml .Values.frontend.resources | nindent 12 }}
          {{- end }}
          ports:
            - containerPort: 80
              protocol: TCP
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
            - mountPath: /etc/nginx/conf.d/default.conf
              name: nginx-conf
              subPath: default.conf
            - mountPath: /etc/nginx/nginx.conf
              name: nginx-conf
              subPath: nginx.conf
        - name: backend
          image: {{ include "backend.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.backend.resources }}
          resources: {{- toYaml .Values.backend.resources | nindent 12 }}
          {{- end }}
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          args:
            - --kubeconfig=strategy=configmap,configmap={{ .Chart.Name }}-kubeconfig,namespace={{ .Release.Namespace }},filename=config
            - --metrics-scraper-url=http://localhost:8000
            - --terminal-url=http://localhost:3003
            - --log-level=info
          ports:
            - containerPort: 3000
              protocol: TCP
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
        - name: metrics-scraper
          image: {{ include "metrics-scraper.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.metricsScraper.resources }}
          resources: {{- toYaml .Values.metricsScraper.resources | nindent 12 }}
          {{- end }}
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          args:
            - --kubeconfig=/app/.kube/config
            - --log-level=info
            - --db-file=/app/data/metrics.db
          ports:
            - containerPort: 8000
              protocol: TCP
          volumeMounts:
            - mountPath: /app/.kube
              name: kubeconfig
            - mountPath: /app/data
              name: data-volume
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
        - name: terminal
          image: {{ include "terminal.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.terminal.resources }}
          resources: {{- toYaml .Values.terminal.resources | nindent 12 }}
          {{- end }}
          args:
            - --kubeconfig=/app/.kube/config
            - --log-level=info
          ports:
            - containerPort: 3003
              protocol: TCP
          volumeMounts:
            - mountPath: /app/.kube
              name: kubeconfig
          securityContext:
            privileged: true
      volumes:
        - name: tmp-volume
          emptyDir: {}
        - name: nginx-conf
          configMap:
            name: kore-board-nginx
            items:
              - key: nginx.conf
                path: nginx.conf
              - key: default.conf
                path: default.conf
        - name: kubeconfig
          configMap:
            name: {{ .Chart.Name }}-kubeconfig
        - name: data-volume
      {{- if .Values.metricsScraper.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ default "kore-board-metricsScraper" .Values.metricsScraper.persistence.existingClaim  }}
      {{- else }}
          emptyDir: {}
      {{- end }}
      serviceAccountName: {{ .Chart.Name }}
      nodeSelector:
        "kubernetes.io/os": linux

{{- else }}

kind: Deployment
apiVersion: apps/v1
metadata:
  name: backend
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: backend
    {{- include "labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.backend.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: backend
      {{- include "labels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: backend
        {{- include "labels" . | nindent 8 }}
    spec:
      containers:
        - name: backend
          image: {{ include "backend.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.backend.resources }}
          resources: {{- toYaml .Values.backend.resources | nindent 12 }}
          {{- end }}
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          args:
            - --kubeconfig=strategy=configmap,configmap={{ .Chart.Name }}-kubeconfig,namespace={{ .Release.Namespace }},filename=config
            - --metrics-scraper-url=http://metrics-scraper:8000
            - --terminal-url=http://terminal:3003
            - --log-level=info
          ports:
            - containerPort: 3000
              protocol: TCP
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir: {}
      serviceAccountName: {{ .Chart.Name }}
      nodeSelector:
        "kubernetes.io/os": linux

---

kind: Deployment
apiVersion: apps/v1
metadata:
  name: metrics-scraper
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: metrics-scraper
    {{- include "labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: metrics-scraper
      {{- include "labels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: metrics-scraper
        {{- include "labels" . | nindent 8 }}
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'runtime/default'
    spec:
      containers:
        - name: metrics-scraper
          image: {{ include "metrics-scraper.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.metricsScraper.resources }}
          resources: {{- toYaml .Values.metricsScraper.resources | nindent 12 }}
          {{- end }}
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          args:
            - --kubeconfig=/app/.kube/config
            - --log-level=info
            - --db-file=/app/data/metrics.db
          ports:
            - containerPort: 8000
              protocol: TCP
          volumeMounts:
            - mountPath: /app/.kube
              name: kubeconfig
            - mountPath: /app/data
              name: data-volume
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      volumes:
        - name: kubeconfig
          configMap:
            name: {{ .Chart.Name }}-kubeconfig
        - name: data-volume
      {{- if .Values.metricsScraper.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ default "kore-board-metrics-scraper" .Values.metricsScraper.persistence.existingClaim  }}
      {{- else }}
          emptyDir: {}
      {{- end }}
      serviceAccountName: {{ .Chart.Name }}
      nodeSelector:
        "kubernetes.io/os": linux

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    app.kubernetes.io/name: terminal
    {{- include "labels" . | nindent 4 }}
  name: terminal
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: terminal
      {{- include "labels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: terminal
        {{- include "labels" . | nindent 8 }}
    spec:
      containers:
        - name: terminal
          image: {{ include "terminal.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.terminal.resources }}
          resources: {{- toYaml .Values.terminal.resources | nindent 12 }}
          {{- end }}
          args:
            - --kubeconfig=/app/.kube/config
            - --log-level=info
          ports:
            - containerPort: 3003
              protocol: TCP
          volumeMounts:
            - mountPath: /app/.kube
              name: kubeconfig
          securityContext:
            privileged: true
      volumes:
        - name: kubeconfig
          configMap:
            name: {{ .Chart.Name }}-kubeconfig
      serviceAccountName: {{ .Chart.Name }}
      nodeSelector:
        "kubernetes.io/os": linux


---

kind: Deployment
apiVersion: apps/v1
metadata:
  name: frontend
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: frontend
    {{- include "labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.frontend.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: frontend
      {{- include "labels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: frontend
        {{- include "labels" . | nindent 8 }}
    spec:
      containers:
        - name: frontend
          image: {{ include "frontend.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.frontend.resources }}
          resources: {{- toYaml .Values.frontend.resources | nindent 12 }}
          {{- end }}
          ports:
            - containerPort: 80
              protocol: TCP
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
            - mountPath: /etc/nginx/conf.d/default.conf
              name: nginx-conf
              subPath: default.conf
            - mountPath: /etc/nginx/nginx.conf
              name: nginx-conf
              subPath: nginx.conf
      volumes:
        - name: tmp-volume
          emptyDir: {}
        - name: nginx-conf
          configMap:
            name: kore-board-nginx
            items:
              - key: nginx.conf
                path: nginx.conf
              - key: default.conf
                path: default.conf
      serviceAccountName: {{ .Chart.Name }}
      nodeSelector:
        "kubernetes.io/os": linux

{{- end }}
